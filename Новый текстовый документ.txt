<?php
namespace App;

class Truncater
{
    const OPTIONS = [
        'separator' => '...',
        'length' => 200,
    ];
    
    private $options = [];

    public function __construct($options = [])
    {
        $this->options = array_merge(self::OPTIONS, $options);
    }
    public function truncate($string, $callOptions = [])
    {
        $newOptions = array_merge($this->options, $callOptions);

        $substr = substr($string, 0, $newOptions['length']);

        if (strlen($substr) < strlen($string)) {
            return "{$substr}{$newOptions['separator']}";
        } else {
            return $substr;
        }
    }
}


class TruncaterTest extends TestCase
{
    public function testTruncate()
    {
        $truncater = new Truncater();
        $actual = $truncater->truncate('one two');
        $this->assertEquals('one two', $actual);
        $actual = $truncater->truncate('one two', ['length' => 6]);
        $this->assertEquals('one tw...', $actual);
        $actual = $truncater->truncate('one two', ['separator' => '.']);
        $this->assertEquals('one two', $actual);
        $actual = $truncater->truncate('one two', ['length' => '3']);
        $this->assertEquals('one...', $actual);

        $truncater = new Truncater(['length' => 3]);
        $actual = $truncater->truncate('one two');
        $this->assertEquals('one...', $actual);
        $actual = $truncater->truncate('one two', ['separator' => '!']);
        $this->assertEquals('one!', $actual);
        $actual = $truncater->truncate('one two');
        $this->assertEquals('one...', $actual);

        $actual = $truncater->truncate('one two', ['length' => 7]);
        $this->assertEquals('one two', $actual);
    }
}


function toStd(array $array): \stdClass{
    $std = new \stdClass();
    foreach ($array as $key => $value) {
        $std->$key = $value;
    }
    return $std;
}



class ConverterTest extends TestCase
{
    public function testConverter()
    {
        $data = [
            'key' => 'value',
            'key2' => 'value2',
        ];
        $config = toStd($data);
        $this->assertEquals((object) $data, $config);

        $data2 = [
            'keysdd' => 'vasdfalue',
            'kasdfey2' => 'asdvalue2',
        ];
        $config = toStd($data2);
        $this->assertEquals((object) $data2, $config);
    }
}


<?php

namespace App;

class Course
{
    private $name;

    public function __construct($name)
    {
        $this->name = $name;
    }

    public function getName()
    {
        return $this->name;
    }
}



namespace App\Tests;

use App\Course;
use PHPUnit\Framework\TestCase;

class CourseTest extends TestCase{
    public function testCourse(){
        $name="name";
        $course = new Course($name);
        $this->assertEquals($name, $course->getName());
    }


