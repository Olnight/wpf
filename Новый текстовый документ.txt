<?php
namespace App\Normalizer;
use Illuminate\Support\Collection;

function normalize(array $raw): array {
    return collect($raw)
        ->map(function ($item) {
            return [
                'name' => strtolower(trim($item['name'])),
                'country' => strtolower(trim($item['country']))
            ];
        })
        ->groupBy('country')
        ->map(function ($item) {
            return $item->pluck('name')
                        ->unique()
                        ->sort()
                        ->values();
        })
        ->sortKeys()
        ->toArray();
}


<?php
namespace App;
use Carbon\Carbon;

class Booking
{
    private $bookedDates = [];

    public function book(string $startDate, string $endDate): bool
    {
        $start =  new Carbon($startDate);
        $end = new Carbon($endDate);

        if ($start >= $end) {
            return false;
        }
        
        // доступна ли бронь
        foreach ($this->bookedDates as $dates) {
            $isIntersected = $start < $dates['end'] && $end > $dates['start'];
            if ($isIntersected) {
                return false;
            }
        }

        $this->bookedDates[] = ['start' => $start, 'end' => $end];
        return true;
    }
}


<?php
namespace App\Normalizer;
use function Symfony\Component\String\s;

function getQuestions(string $text): string
{
    $lines = explode("\n", $text);
    $questions = [];

    foreach ($lines as $line) {
        $trimmedLine = s($line)->trim();
        if ($trimmedLine->endsWith('?')) {
            $questions[] = $trimmedLine->toString();
        }
    }

    return implode("\n", $questions);
}
