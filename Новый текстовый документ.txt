<?php
namespace App;

class Square
{
    private $side;

    public function __construct($side)
    {
        $this->side = $side;
    }

    public function getSide()
    {
        return $this->side;
    }
}

<?php

namespace App;
use App\Square;

class SquaresGenerator
{
    public static function generate(int $side, int $amount = 5): array
    {
        $array = [];
        for ($i = 0; $i < $amount; $i++) {  
            $array[] = new Square($side);
        }
        return $array;
    }
}





<?php

namespace App;

class Random
{
    public const RAND_MAX = 32767;
    public const RAND2 = 13456;
    public const  RAND3 = 17813;
    private $seed;
    public $next;

    public function __construct($seed)
    {
        $this->seed = $seed;
        $this->next = $seed;
    }

    public function getSeed()
    {
        return $this->seed;
    }

    public function getNext()
    {
        $this->next = $this->next * self::RAND_MAX + self::RAND2;
        return ($this->next / self::RAND3) % (self::RAND_MAX + 1);
    }

    public function reset()
    {
        $this->next = $this->seed;
    }
}





<?php

namespace App;

class PasswordValidator
{
    private $array;

    public function __construct($newDefaultOptions = [], $defaultOptions = [
            'containNumbers' => false,
            'minLength' => 8
        ])
    {
        $this->array = array_replace($defaultOptions, $newDefaultOptions);
    }

    public function validate($password)
    {
        $errors = [];
        if (strlen($password) < $this->array['minLength']) {
            $errors['minLength'] = 'too small';
        }
        if ($this->array['containNumbers']) {
            if (!$this->hasNumber($password)) {
                $errors['containNumbers'] = 'should contain at least one number';
            }
        }

        return $errors;
    }
    private function hasNumber($subject)
    {
        return strpbrk($subject, '1234567890');
    }
}
