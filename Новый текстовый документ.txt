<?php

namespace App;

class HTMLElement
{
    private $attributes = [];

    public function __construct($attributes = [])
    {
        $this->attributes = $attributes;
    }

    protected function stringifyAttributes()
    {
        return implode(' ', array_map(function ($key, $value) {
            return "$key=\"$value\"";
        }, array_keys($this->attributes), $this->attributes));
    }
}



<?php

namespace App;

class HTMLHrElement extends HTMLElement
{
    public function __toString()
    {
        $attributes = $this->stringifyAttributes();
        return "<hr" . ($attributes ? ' ' : '') . $attributes . ">";
    }
}



















<?php

namespace App;

class HTMLDivElement extends HTMLElement
{
}


<?php

namespace App;

class HTMLElement
{
    private $attributes = [];

    public function __construct($attributes = [])
    {
        $this->attributes = $attributes;
    }

    public function addClass(string $className): void
    {
        $classes = $this->getClassesAsArray();
        if (!in_array($className, $classes)) {
            $classes[] = $className;
        }
        $this->attributes['class'] = $this->classesArrayToString($classes);
    }

    public function removeClass(string $className): void
    {
        $classes = $this->getClassesAsArray();
        $this->attributes['class'] = $this->classesArrayToString(array_filter($classes, function($class) use ($className) {
            return $class !== $className;
        }));
    }

    public function toggleClass(string $className): void
    {
        $classes = $this->getClassesAsArray();
        if (in_array($className, $classes)) {
            $this->removeClass($className);
        } else {
            $this->addClass($className);
        }
    }

    public function getAttribute(string $attrName): ?string
    {
        return $this->attributes[$attrName] ?? null;
    }

    private function getClassesAsArray(): array
    {
        if (empty($this->attributes['class'])) {
            return [];
        }
        return explode(' ', $this->attributes['class']);
    }

    private function classesArrayToString(array $classes): string
    {
        return implode(' ', $classes);
    }
}














<?php

namespace App;

class Base
{
    public function isInstanceOf(string $className): bool
    {
        $currentClass = get_class($this);

        if ($currentClass === $className) {
            return true;
        }

        $parents = class_parents($this);
        return in_array($className, $parents, true);
    }
}
