<?php
namespace App\Comparator;
function processString($str) {
    $stack = new \Ds\Stack();
    for ($i = 0; $i < strlen($str); $i++) {
        if ($str[$i] != '#') {
            $stack->push($str[$i]);
        } elseif (!$stack->isEmpty()) {
            $stack->pop();
        }
    }
    return implode('', $stack->toArray());
}

function compare($seq1, $seq2) {
    return processString($seq1) === processString($seq2);
}
<?php
// установка
// composer require --dev phpunit/phpunit
// composer update
// запуск
// php ./vendor/bin/phpunit --testdox tests
namespace App\Tests;

use PHPUnit\Framework\TestCase;
use App\Url;

class UrlTest extends TestCase
{
    private string $yandexUrl;
    private string $googleUrl;

    protected function setUp(): void
    {
        $this->yandexUrl = 'http://yandex.ru?key=value&key2=value2';
        $this->googleUrl = 'https://google.com:80?a=b&c=d&lala=value';
    }

    public function testYandex()
    {
        $url = new Url($this->yandexUrl);

        $this->assertEquals('http', $url->getScheme());
        $this->assertEquals('yandex.ru', $url->getHostName());
        $params = [
            'key' => 'value',
            'key2' => 'value2'
        ];
        $this->assertEquals($params, $url->getQueryParams());
        $this->assertEquals('value', $url->getQueryParam('key'));
        $this->assertEquals('value2', $url->getQueryParam('key2', 'lala'));
        $this->assertEquals('ehu', $url->getQueryParam('new', 'ehu'));
        $this->assertTrue($url->equals(new Url($this->yandexUrl)));
        $this->assertFalse($url->equals(new Url($this->googleUrl)));
    }

    public function testGoogle()
    {
        $url = new Url($this->googleUrl);

        $this->assertEquals('https', $url->getScheme());
        $this->assertEquals('google.com', $url->getHostName());
        $params = [
            'a' => 'b',
            'c' => 'd',
            'lala' => 'value'
        ];
        $this->assertEquals($params, $url->getQueryParams());
        $this->assertNull($url->getQueryParam('key'));
        $this->assertTrue($url->equals(new Url($this->googleUrl)));
        $this->assertFalse($url->equals(new Url('https://google.com')));
        $this->assertFalse($url->equals(new Url(str_replace('80', '443', $this->googleUrl))));
    }
}




<?php
namespace App;
use Illuminate\Support\Collection;

class DeckOfCards
{
    private Collection $cards;

    public function __construct(array $cardValues)
    {
        $this->cards = collect($cardValues)
            ->flatMap(function ($value): array {
                return array_fill(0, 4, $value); 
            });
    }

    public function getShuffled(): array
    {
        return $this->cards->shuffle()->all();
    }
}
use App\DeckOfCards;
use PHPUnit\Framework\TestCase;

class DeckOfCardsTest extends TestCase
{
    public function testGetShuffled1()
    {
        $expected = [2, 2, 2, 2, 3, 3, 3, 3];
        $deck = new DeckOfCards([2, 3]);
        $result1 = $deck->getShuffled();
        $result2 = $deck->getShuffled();
        $this->assertNotEquals($result1, $result2);

        sort($result1);
        $this->assertEquals($expected, $result1);

        sort($result2);
        $this->assertEquals($expected, $result2);
    }

    public function testGetShuffled2()
    {
        $expected = [7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9];
        $deck = new DeckOfCards([8, 9, 7]);
        $result1 = $deck->getShuffled();
        $result2 = $deck->getShuffled();
        $this->assertNotEquals($result1, $result2);

        sort($result1);
        $this->assertEquals($expected, $result1);

        sort($result2);
        $this->assertEquals($expected, $result2);
    }
}






<?php
namespace App;

class Url
{
    private $url;
    private $components;
    private $queryParams;

    public function __construct($url)
    {
        $this->url = $url;
        $this->components = parse_url($url);
        parse_str($this->components['query'] ?? '', $this->queryParams);
    }

    public function getScheme()
    {
        return $this->components['scheme'] ?? null;
    }

    public function getHostName()
    {
        return $this->components['host'] ?? null;
    }

    public function getQueryParams()
    {
        return $this->queryParams;
    }

    public function getQueryParam($key, $default = null)
    {
        return $this->queryParams[$key] ?? $default;
    }

    public function equals(Url $otherUrl)
    {
        return $this->url === $otherUrl->url;
    }
}
class UrlTest extends TestCase
{
    private string $yandexUrl;
    private string $googleUrl;

    protected function setUp(): void
    {
        $this->yandexUrl = 'http://yandex.ru?key=value&key2=value2';
        $this->googleUrl = 'https://google.com:80?a=b&c=d&lala=value';
    }

    public function testYandex()
    {
        $url = new Url($this->yandexUrl);

        $this->assertEquals('http', $url->getScheme());
        $this->assertEquals('yandex.ru', $url->getHostName());
        $params = [
            'key' => 'value',
            'key2' => 'value2'
        ];
        $this->assertEquals($params, $url->getQueryParams());
        $this->assertEquals('value', $url->getQueryParam('key'));
        $this->assertEquals('value2', $url->getQueryParam('key2', 'lala'));
        $this->assertEquals('ehu', $url->getQueryParam('new', 'ehu'));
        $this->assertTrue($url->equals(new Url($this->yandexUrl)));
        $this->assertFalse($url->equals(new Url($this->googleUrl)));
    }

    public function testGoogle()
    {
        $url = new Url($this->googleUrl);

        $this->assertEquals('https', $url->getScheme());
        $this->assertEquals('google.com', $url->getHostName());
        $params = [
            'a' => 'b',
            'c' => 'd',
            'lala' => 'value'
        ];
        $this->assertEquals($params, $url->getQueryParams());
        $this->assertNull($url->getQueryParam('key'));
        $this->assertTrue($url->equals(new Url($this->googleUrl)));
        $this->assertFalse($url->equals(new Url('https://google.com')));
        $this->assertFalse($url->equals(new Url(str_replace('80', '443', $this->googleUrl))));
    }
